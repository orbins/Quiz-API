swagger: '2.0'
x-stoplight:
  id: lykio0me2n135
info:
  title: QuizApp API
  description: QuizApp REST API
  version: v1
  contact:
    name: Tkachenko Danil
    email: orwellj@mail.ru
schemes:
  - http
basePath: /
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  'JWT [Bearer {JWT}]':
    name: Authorization
    type: apiKey
    in: query
security:
  - Basic: []
paths:
  /register/:
    post:
      operationId: register_post
      description: 'Создание пользователя. Эндпоинт доступен для всех пользователей. Доступен только метод POST. В случае успешного создания возвращается код 201 и JSON с основными атрибутами пользователя и его id. Эндпоинт не авторизует пользователя, а только создает его. '
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              password:
                type: string
              password2:
                type: string
              first_name:
                type: string
              last_name:
                type: string
            x-examples:
              Example 1:
                email: examole@example.com
                username: user1234
                password: secretpa$$word
                password2: secretpa$$word
                first_name: 'Oleg '
                last_name: Ivanov
          x-examples:
            '':
              email: examole@example.com
              username: user1234
              password: secretpa$$word
              password2: secretpa$$word
              first_name: 'Oleg '
              last_name: Ivanov
          description: ''
      responses:
        '201':
          description: ''
          schema:
            type: object
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                type: string
              last_name:
                type: string
            x-examples:
              Example 1:
                email: examole@example.com
                username: user1234
                first_name: 'Oleg '
                last_name: Ivanov
          examples:
            Success:
              email: examole@example.com
              username: user1234
              first_name: 'Oleg '
              last_name: Ivanov
        '400':
          description: ''
          schema:
            type: object
            x-examples:
              Example 1:
                field_name:
                  - Обязательное поле.
            properties:
              field_name:
                type: array
                items:
                  type: string
          examples:
            Bad Request:
              field_name:
                - Обязательное поле.
          headers: {}
      tags:
        - register
      summary: Создание пользователя
    parameters: []
  /login/:
    post:
      operationId: login_post
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenObtainPair'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TokenObtainPair'
      summary: ''
      tags:
        - login
    parameters: []
  /refresh/:
    post:
      operationId: refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenRefresh'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TokenRefresh'
      tags:
        - refresh
    parameters: []
  /categories/:
    get:
      operationId: categories_list
      description: |-
        Для просмотра списка всех существующих категорий и
        создания новых с возможностью фильтрации по автору
      parameters:
        - name: name
          in: query
          description: ''
          required: false
          type: string
        - name: page
          in: query
          description: A page number within the paginated result set.
          required: false
          type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
              - count
              - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/Category'
      tags:
        - categories
    post:
      operationId: categories_create
      description: |-
        Для просмотра списка всех существующих категорий и
        создания новых с возможностью фильтрации по автору
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Category'
      tags:
        - categories
    parameters: []
  '/category/{id}/':
    get:
      operationId: category_read
      description: |-
        Для обновления, получения
        и удаления категорий доступно
        только их авторам
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Category'
      tags:
        - category
    patch:
      operationId: category_partial_update
      description: |-
        Для обновления, получения
        и удаления категорий доступно
        только их авторам
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Category'
      tags:
        - category
    delete:
      operationId: category_delete
      description: |-
        Для обновления, получения
        и удаления категорий доступно
        только их авторам
      parameters: []
      responses:
        '204':
          description: ''
      tags:
        - category
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this Category.
        required: true
        type: integer
  /quizzes/:
    get:
      operationId: quizzes_list
      description: Получение списка квизов
      parameters:
        - name: author
          in: query
          description: ''
          required: false
          type: string
        - name: category
          in: query
          description: ''
          required: false
          type: string
        - name: page
          in: query
          description: A page number within the paginated result set.
          required: false
          type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
              - count
              - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/Quiz'
      tags:
        - quizzes
    post:
      operationId: quizzes_create
      description: Получение списка квизов
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Quiz'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Quiz'
      tags:
        - quizzes
    parameters: []
  '/quiz/{id}/':
    get:
      operationId: quiz_read
      description: |-
        Получение, обновление
        и удаление квиза
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Quiz'
      tags:
        - quiz
    patch:
      operationId: quiz_partial_update
      description: |-
        Получение, обновление
        и удаление квиза
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Quiz'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Quiz'
      tags:
        - quiz
    delete:
      operationId: quiz_delete
      description: |-
        Получение, обновление
        и удаление квиза
      parameters: []
      responses:
        '204':
          description: ''
      tags:
        - quiz
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this Quiz.
        required: true
        type: integer
  /questions/:
    get:
      operationId: questions_list
      description: Получение списка вопросов и создание вопроса
      parameters:
        - name: quiz
          in: query
          description: ''
          required: false
          type: string
        - name: author
          in: query
          description: ''
          required: false
          type: string
        - name: is_active
          in: query
          description: ''
          required: false
          type: string
        - name: page
          in: query
          description: A page number within the paginated result set.
          required: false
          type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
              - count
              - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/Question'
      tags:
        - questions
    post:
      operationId: questions_create
      description: Получение списка вопросов и создание вопроса
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Question'
      tags:
        - questions
    parameters: []
  '/question/{id}/':
    get:
      operationId: question_read
      description: |-
        Обновление, удаление, чтение конкретного вопроса,
        доступно только для автора самого вопроса
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Question'
      tags:
        - question
    patch:
      operationId: question_partial_update
      description: |-
        Обновление, удаление, чтение конкретного вопроса,
        доступно только для автора самого вопроса
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Question'
      tags:
        - question
    delete:
      operationId: question_delete
      description: |-
        Обновление, удаление, чтение конкретного вопроса,
        доступно только для автора самого вопроса
      parameters: []
      responses:
        '204':
          description: ''
      tags:
        - question
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this Question.
        required: true
        type: integer
  '/random/{quiz_id}/':
    get:
      operationId: random_read
      description: Получение случайного вопроса
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          required: false
          type: integer
      responses:
        '200':
          description: ''
          schema:
            required:
              - count
              - results
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
                format: uri
                x-nullable: true
              previous:
                type: string
                format: uri
                x-nullable: true
              results:
                type: array
                items:
                  $ref: '#/definitions/Question'
      tags:
        - random
    parameters:
      - name: quiz_id
        in: path
        required: true
        type: string
  '/answer/{id}/':
    get:
      operationId: answer_read
      description: |-
        Чтение, обновление и удаление ответа на вопрос,
        доступно только для автора
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SingleAnswer'
      tags:
        - answer
    patch:
      operationId: answer_partial_update
      description: |-
        Чтение, обновление и удаление ответа на вопрос,
        доступно только для автора
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/SingleAnswer'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SingleAnswer'
      tags:
        - answer
    delete:
      operationId: answer_delete
      description: |-
        Чтение, обновление и удаление ответа на вопрос,
        доступно только для автора
      parameters: []
      responses:
        '204':
          description: ''
      tags:
        - answer
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this Answer.
        required: true
        type: integer
  /answer/:
    post:
      operationId: answer_create
      description: |-
        Создание ответа на вопрос,
        текущий пользователь автоматически определяется
        в качестве автора
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/SingleAnswer'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/SingleAnswer'
      tags:
        - answer
    parameters: []
definitions:
  SingleAnswer:
    required:
      - question
      - text
    type: object
    properties:
      question:
        title: Question
        type: integer
      question_title:
        title: Question title
        type: string
        readOnly: true
      id:
        title: ID
        type: integer
        readOnly: true
      text:
        title: Answer Text
        type: string
        maxLength: 500
        minLength: 1
      is_right:
        title: Is right
        type: boolean
      author_name:
        title: Author name
        type: string
        readOnly: true
    x-stoplight:
      id: tc6dsu5e3t5km
  Category:
    required:
      - name
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      name:
        title: Name
        type: string
        maxLength: 255
        minLength: 1
    x-stoplight:
      id: ntnusbgr7taxn
  TokenObtainPair:
    required:
      - username
      - password
    type: object
    properties:
      username:
        title: Username
        type: string
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
    x-stoplight:
      id: mdfkee7wfr6rs
  Answer:
    required:
      - text
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      text:
        title: Answer Text
        type: string
        maxLength: 500
        minLength: 1
      is_right:
        title: Is right
        type: boolean
    x-stoplight:
      id: 8uwwnlgunvzdg
  Question:
    required:
      - quiz
      - title
    type: object
    properties:
      quiz:
        title: Quiz
        type: integer
      quiz_title:
        title: Quiz title
        type: string
        readOnly: true
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        maxLength: 500
        minLength: 1
      kind:
        title: Type of question
        type: integer
        enum:
          - 0
          - 1
      difficulty:
        title: Difficulty
        type: integer
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
      is_active:
        title: Is active
        type: boolean
        default: true
      author_name:
        title: Author name
        type: string
        readOnly: true
      answers:
        type: array
        items:
          $ref: '#/definitions/Answer'
        readOnly: true
    x-stoplight:
      id: 7gzxh7vgenz4e
  Quiz:
    required:
      - title
      - category
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        minLength: 1
      category:
        title: Category
        type: string
        minLength: 1
      author_name:
        title: Author name
        type: string
        readOnly: true
    x-stoplight:
      id: luxoiludsfs3p
  TokenRefresh:
    required:
      - refresh
    type: object
    properties:
      refresh:
        title: Refresh
        type: string
        minLength: 1
      access:
        title: Access
        type: string
        readOnly: true
        minLength: 1
    x-stoplight:
      id: uhjwxwrttbsf9
  User:
    type: object
    x-stoplight:
      id: n7rxpt7pwzjr2
    x-examples:
      '':
        email: user@example.com
        username: User1234
        password: secretpassword123
        password2: secretpassword123
        first_name: Oleg
        last_name: Ivanov
    properties:
      email:
        title: Email
        type: string
        format: email
        minLength: 1
        default: examole@example.com
      username:
        title: Username
        description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'
        type: string
        pattern: '^[\w.@+-]+$'
        maxLength: 150
        minLength: 1
        example: user1234
      password:
        title: Password
        type: string
        minLength: 6
        format: password
        maxLength: 128
        example: secretpa$$word
      password2:
        title: Password2
        type: string
        minLength: 6
        format: password
        maxLength: 128
        example: secretpa$$word
      first_name:
        title: First name
        type: string
        maxLength: 150
        example: 'Oleg '
      last_name:
        title: Last name
        type: string
        maxLength: 150
        example: Ivanov
    required:
      - email
      - username
      - password
      - password2
      - first_name
      - last_name
    title: ''
    description: ''
responses: {}
host: '127.0.0.1:8000'
