swagger: '2.0'
x-stoplight:
  id: 1bhmz1omi0ski
info:
  title: TutorOffice API
  version: v1
  contact:
    name: Tkachenko Danil
    email: orwellj@mail.ru
host: '127.0.0.1:8000'
schemes:
  - http
basePath: /
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  'JWT [Bearer {JWT}]':
    name: Authorization
    type: apiKey
    in: header
security:
  - Basic: []
paths:
  /register/:
    post:
      operationId: register
      description: |-
        Создание пользователя и отправка сообщения для верификации почты.
        Эндпоинт доступен для всех пользователей. Доступен только метод POST. 
        В случае успешного создания пользователю на почту отправляется письмо с вложенной ссылкой для подтверждения почты и в ответе возвращается предупреждение о том, что ему необходимо перейти на почту для подтверждения.
        Эндпоинт не авторизует пользователя, а только создает его и отправляет письмо для подтверждения.
        Если пользователь ввёл несуществующую почту, пользователь будет создан, но письмо отправлено не будет.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Register'
          x-examples:
            Регистрация ученика:
              first_name: Дмитрий
              patronymic_name: Владимирович
              last_name: Иванов
              email: example@example.com
              phone: '81234567890'
              is_teacher: false
              password: Fh789123!
              password2: Fh789123!
            Регистрация репетитора:
              first_name: Дмитрий
              patronymic_name: Владимирович
              last_name: Иванов
              email: example@example.com
              phone: '81234567890'
              is_teacher: true
              password: Fh789123!
              password2: Fh789123!
          description: ''
      responses:
        '201':
          description: ''
          schema:
            type: object
            properties:
              success:
                type: string
                x-stoplight:
                  id: nsvyeqhmay9fv
                example: Регистрация прошла успешно! Для входа в аккаунт Вам было отправлено письмо с подтверждением на почту!
                description: Сообщение об успешной регистрации
          examples:
            Успешная регистрация:
              success: Регистрация прошла успешно! Для входа в аккаунт Вам было отправлено письмо с подтверждением на почту!
        '400':
          $ref: '#/responses/ValidationError'
      summary: Создание пользователя
      tags:
        - Пользователи
    parameters: []
  '/activate/{token}/':
    parameters:
      - name: token
        in: path
        type: string
        description: 'Токен, который встроен в ссылку, присылаемую на почту пользователю для подтверждения своего аккаунта. Предназначен для идентификации пользователя и сохранения конфиденциальности его данных.'
        required: true
    post:
      summary: Подтверждение почты
      operationId: activate
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              refresh:
                type: string
                x-stoplight:
                  id: 771sweuqslzhr
              access:
                type: string
                x-stoplight:
                  id: mtcj1k0md0vk0
              role:
                type: string
                x-stoplight:
                  id: iej8zjee2j5zq
          examples:
            Активация для ученика:
              refresh: string
              access: string
              role: student
            Активация для учителя:
              refresh: string
              access: string
              role: teacher
        '400':
          $ref: '#/responses/ValidationError'
      description: |-
        Верификация почты. Эндпоинт принимает только метод POST, доступен для всех пользователей.
        Если у токена истечёт срок годности (1 день) или он является невалидным (попытка подмены), или же если пользователь захочет повторно воспользоваться ссылкой с этим же токеном, вернётся ошибка.
        В случае успеха возвращаются access и refresh-токены, чтобы авторизовать и перенаправить профиль пользователя и тип пользователя, который необходим для fronted-приложения. Подробнее о токенах см. раздел <b>Токены</b>
      parameters: []
      tags:
        - Пользователи
  /profile/:
    get:
      operationId: profile_read
      description: Получение профиля текущего пользователя. Эндпоинт доступен только для <b>текущего</b> авторизованного пользователя.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Profile'
          examples:
            Данные профиля:
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              first_name: Дмитрий
              patronymic_name: Владимирович
              last_name: Иванов
              email: example@example.com
              phone: '81234567890'
              photo: 'http://example.com'
        '401':
          $ref: '#/responses/AuthenticationError'
      summary: Профиль пользователя
      tags:
        - Пользователи
    patch:
      operationId: profile_update
      description: 'Частичное обновление данных профиля текущего пользователя. Эндпоинт доступен только для <b>текущего</b> авторизованного пользователя. Изменение почты недоступно. В ответ возварщаются все данные профиля пользователя, включая измененные.'
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Profile'
          x-examples:
            Поля для обновления:
              first_name: Дмитрий
              patronymic_name: Владимирович
              last_name: Иванов
              phone: '81234567890'
              photo: 'http://example.com'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Profile'
          examples:
            Данные профиля пользователя:
              first_name: Дмитрий
              patronymic_name: Владимирович
              last_name: Иванов
              phone: '81234567890'
              photo: 'http://example.com'
        '400':
          $ref: '#/responses/ValidationError'
        '401':
          $ref: '#/responses/AuthenticationError'
      summary: Обновление профиля пользователя
      tags:
        - Пользователи
    parameters: []
  /login/:
    post:
      operationId: login
      description: |
        <p>
        <a href="https://jwt.io/introduction">Токены JWT</a> - единственный допустимый способ авторизации пользователей в рамках данного проекта. Для получения токена в запросе нужно передать email пользователя и password. В случае, если пользователь с такой парой email/password существует, сервер создаст пару токенов refresh и access и отправит их в ответном JSON вместе с типом пользователя, необходимым для frontend-приложения. Эндпоинт доступен для всех пользователей, допустим только метод POST. Если пользователь не подтвердил почту, на неё будет отправлено письмо с просьбой подтверждения.

        Любой запрос к серверу, требующий авторизацию и аутентификацию следует отправлять с авторизационным токеном:<br>
        <pre>Authorization: Bearer ACCESS_TOKEN</pre>
        </p>
        <p>
        Вот общий воркфлоу для аутентификации пользователей в бэкэнде Django/DRF с использованием JWT с токенами <code>access</code> и <code>refresh</code>:
        <ul>
        <li>Пользователь вводит свои учетные данные для входа (имя пользователя/адрес электронной почты и пароль) в форму входа в интерфейсе.</li>
        <li>Внешний интерфейс (фронтэнд) отправляет запрос POST к эндпоинту API, отвечающему за обработку аутентификации пользователя.</li>
        <li>В бэкэнде Django/DRF контроллер аутентификации проверяет учетные данные пользователя. Если учетные данные действительны, серверная часть создает access-токен JWT и refresh-токен и возвращает их фронтэнду в ответе.</li>
        <li>Во внешнем интерфейсе действие входа получает ответ и извлекает токены доступа и обновления JWT. Затем токены сохраняются в локальном хранилище или в файле cookie для будущего использования.</li>
        <li>Для всех последующих запросов API, сделанных внешним интерфейсом, access-токен JWT включается в заголовок авторизации запроса: <code>Authorization: Bearer ACCESS_TOKEN</code></li>
        <li>В бэкэнде Django/DRF класс аутентификации JWT используется для проверки токена доступа JWT и извлечения из него информации о пользователе.</li>
        <li>Если токен доступа действителен, запрос обрабатывается так, как если бы пользователь прошел проверку подлинности. Если токен доступа недействителен, серверная часть возвращает ответ об ошибке, указывающий, что пользователь не прошел проверку подлинности.</li>
        <li>Если срок действия access-токена истек, внешний интерфейс может использовать refresh-токен  для получения нового access-токена, отправив запрос к <code>/refresh/</code> бэкэнда Django/DRF. Эндпоинт проверяет refresh-токен и выдает в ответ новый access и refresh токены.</li>
        <li>Внешний интерфейс получает новые токены и сохраняет их в локальном хранилище или файле cookie для будущего использования.</li>
        <li>Затем внешний интерфейс повторяет исходный запрос API с новым access-токеном.</li>
        </ul>
        </p>
        <p>
        Это обычная практика для внешнего интерфейса, чтобы контролировать возраст access-токена.
        Внешний интерфейс должен проверять время истечения срока действия access-токена перед
        выполнением запроса API. Если срок действия токена истек, внешний интерфейс
        может использовать refresh-токен для получения нового access-токена, как описано выше.
        </p>
        <p>
        Время истечения срока действия токена JWT хранится в полезной нагрузке токена.
        Эта информация представляется в виде временной метки Unix и указывается с помощью ключа «exp» (срок действия).
        Вот пример токена JWT со сроком действия:
        <pre>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
        eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNDI2MjJ9.
        SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        </pre>
        В этом примере время истечения срока действия <code>1516242622</code> включено во вторую
        часть токена JWT, которая является полезной нагрузкой.
        Полезная нагрузка — это объект JSON, закодированный как строка Base64, и он содержит ключи,
        определяющие свойства токена, включая время истечения срока действия.
        </p>
        <p>
        Чтобы получить доступ к сроку действия токена JWT, интерфейсу необходимо декодировать токен
        и проанализировать полезную нагрузку.
        Вот пример того, как декодировать токен JWT с помощью библиотеки jsonwebtoken в Node.js:
        <pre>
        const jwt = require('jsonwebtoken');

        const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNDI2MjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";

        const decoded = jwt.decode(token);

        const expiration = decoded.exp;
        </pre>
        </p>
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenObtainPair'
          x-examples:
            Получение токенов авторизации:
              email: example@example.com
              password: Fh789123!
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TokenObtainPair'
          examples:
            Получение токенов для ученика:
              email: example@example.com
              password: Fh789123!
              role: student
            Получение токенов для репетитора:
              email: example@example.com
              password: Fh789123!
              role: teacher
        '400':
          $ref: '#/responses/ValidationError'
        '401':
          $ref: '#/responses/AuthenticationError'
      summary: Создание токенов
      tags:
        - Токены
    parameters: []
  /refresh/:
    post:
      operationId: refresh
      description: 'Принимает refresh-токен и в случае, если он верный, возвращает пару access и refresh.'
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenRefresh'
          x-examples: {}
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TokenRefresh'
          examples:
            Обновление токенов:
              refresh: string
              access: string
        '401':
          $ref: '#/responses/AuthenticationError'
      summary: Обновление токенов
      tags:
        - Токены
    parameters: []
  /password-reset/:
    post:
      summary: Сброс пароля
      operationId: post-password-reset
      responses:
        '204':
          description: 'Успешное создание запроса на сброс, получение письма с подтверждением на почту'
      tags:
        - Сброс
      description: 'Сброс пароля. Для осуществления операции необходимо передать почту, к которой привязан аккаунт пользователя. В случае если такой аккаунт существует на него будет отправлено письмо с подтверждением сброса. В ином случае письмо попросту не будет отправлено.'
  /password-reset/done/:
    get:
      summary: Уведомление о сбросе
      tags:
        - Сброс
      responses:
        '204':
          description: Возвращается шаблон с подтверждением принятия запроса от пользователя на сброс пароля.
          schema:
            type: object
            properties: {}
      operationId: password-reset-done
      description: 'Шаблон, который возвращается в качестве ответа на ввод пользователем почты для сброса пароля. Чтобы не раскрыать клиентскую базу шаблон возвращается в любом случае, даже если пользователь ввёл почту, которой нет в базе данных. В таком случае письмо с подтверждением сброса попросту не будет отправлено.'
    parameters: []
  '/password-reset/confirm/{uid}/{token}/':
    parameters:
      - type: string
        name: uid
        in: path
        required: true
        description: 'Уникальный идентификатор пользователя, необходим для персонализации писем.'
      - type: string
        name: token
        in: path
        required: true
        description: 'Токен, необходим для обеспечения конфиденциальности и целостности данных'
    post:
      summary: Подтверждение сброса пароля
      operationId: ''
      responses:
        '204':
          description: 'Пароль успешно изменён, перебросит на другой шаблон'
        '400':
          $ref: '#/responses/ValidationError'
      tags:
        - Сброс
      description: 'Для подтверждение сброса пароля пользователю необходимо перейти по ссылке, находящейся в письме, присланном ему на почту. Ему необходимо ввести новый пароль и повторить его.'
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              new_password1:
                type: string
                x-stoplight:
                  id: 4q9ynd39sr9b2
                format: password
              new_password2:
                type: string
                x-stoplight:
                  id: ri51no59n4v1c
                format: password
  /password-reset/complete/:
    get:
      summary: Пароль успешно сброшен
      tags:
        - Сброс
      responses:
        '204':
          description: Шаблон с подтверждением успешной смены пароля.
          schema:
            type: object
            properties: {}
      operationId: password-reset-complete
      description: Возвращает шаболон в случае успешной смены пароля пользователем
  /subjects/:
    get:
      operationId: subjects_list
      description: 'Получение <b>всех</b> предметов, доступно только для <b>репетиторов</b>. Возврщается имя предмета и его id.'
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Subject'
          examples:
            Список предметов:
              - id: 0
                title: string
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      summary: Получение всех предметов
      tags:
        - Репетиторы
    parameters: []
  /teacher/subjects/:
    get:
      operationId: teacher_subjects_list
      description: 'Получение предметов текущего пользователя-репетитора. Эндпоинт доступен для всех авторизованных пользователей, которые являются репетиторами.'
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Subject'
          examples:
            Предметы репетитора:
              - id: 0
                title: string
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      summary: Получение предметов преподавателя
      tags:
        - Репетиторы
    post:
      operationId: teacher_subjects_create
      description: 'Добавление предметов для текущего пользователя-репетитора. Предметы можно выбрать только из списка всех существующих предметов. Возможность добавления (отправки POST) досутпна лишь единожды. Эндпоинт доступен для всех авторизованных пользователей, которые являются репетиторами. Принимается список id существующих предметов. '
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserSubject'
          x-examples:
            Добавление предметов:
              subjects:
                - 1
                - 2
                - 3
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/UserSubject'
          examples:
            Предметы преподавателя:
              subjects:
                - 1
                - 2
                - 3
              titles:
                - string
                - string
                - string
        '400':
          $ref: '#/responses/ValidationError'
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      summary: Добавление предметов репетитору
      tags:
        - Предметы
    parameters: []
    patch:
      summary: Обновление предметов репетитора
      operationId: patch-teacher-subjects
      responses:
        '200':
          description: ''
          examples:
            Предметы преподавателя:
              subjects:
                - 1
                - 2
                - 3
              titles:
                - string
                - string
                - string
          schema:
            type: object
            properties:
              subjects:
                type: array
                items:
                  type: integer
              titles:
                type: array
                items:
                  type: string
            x-examples:
              Example 1:
                subjects:
                  - 1
                titles:
                  - История
        '400':
          $ref: '#/responses/ValidationError'
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      description: 'Обновление предметов для текущего пользователя-репетитора. Предметы можно выбрать только из списка всех существующих предметов. Эндпоинт доступен для всех авторизованных пользователей, которые являются репетиторами. Принимается список id существующих предметов. '
      tags:
        - Предметы
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              subjects:
                type: array
                items:
                  type: string
            x-examples:
              Example 1:
                subjects:
                  - Недопустимый первичный ключ "2" - объект не существует.
          x-examples:
            Обновление перечня предметов:
              subjects:
                - 1
                - 2
                - 3
  /teacher/students/:
    get:
      operationId: teacher_students_list
      description: Получение списка
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TeacherStudent - copy'
          examples:
            Получение учеников репетитора:
              - id: 1
                last_name: Иванов
                first_name: Дмитрий
                patronymic_name: Сергеевич
                phone: '89187651215'
                email: example@example.ru
              - id: 2
                last_name: Смирнов
                first_name: Андрей
                patronymic_name: Сергеевич
                phone: '83257689421'
                email: user@user.com
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      summary: Получение учеников репетитора
      tags:
        - Репетиторы
    post:
      operationId: teacher_students_create
      description: 'Создание собственного ученика репетитора, которого после можно будет привязать к реальному пользователю из базы данных. Эндпоинт доступен только для пользователей-репетиторов. Для создания обязательными являются поля имени, фамилии и почты. Нельзя добавить себя в качестве ученика, также как и нельзя создать 2 учеников с одинаковой почтой.'
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TeacherStudentDetail - copy 2'
          x-examples:
            Запрос на создание ученика:
              last_name: string
              first_name: string
              patronymic_name: string
              phone: string
              email: user@example.com
              comment: string
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TeacherStudent - copy'
          examples:
            Ученик создан успешно:
              id: 0
              last_name: string
              first_name: string
              patronymic_name: string
              phone: string
              email: user@example.com
        '400':
          $ref: '#/responses/ValidationError'
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      tags:
        - Репетиторы
      summary: Создание ученика репетитора
    parameters: []
  '/teacher/student/{id}/':
    patch:
      operationId: teacher_student_partial_update
      description: 'Обновление данных ученика репетитора. Вне зависимости от привязки псевдоученика с пользователем из базы данных, учитель изменяет только данные самого псевдоученика, никак не затрагивая связанного с ним пользователя-ученика. Эндпоинт доступен только для пользователя-репетитора, который создал ученика. Нельзя обновить почту для ученика, к которому уже привязан реальный пользователь.'
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TeacherStudentDetail - copy 2'
          x-examples:
            Изменение данных об ученике:
              last_name: string
              first_name: string
              patronymic_name: string
              phone: string
              email: user@example.com
              comment: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TeacherDetailLesson'
          examples:
            Измененные данные ученика:
              id: 0
              last_name: string
              first_name: string
              patronymic_name: string
              phone: string
              email: user@example.com
              comment: string
        '400':
          $ref: '#/responses/ValidationError'
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      tags:
        - Репетиторы
    delete:
      operationId: teacher_student_delete
      description: Вьюха для CRUD-операций с учениками репетитора
      parameters: []
      responses:
        '204':
          description: Ученик учпешно удалён
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      tags:
        - Репетиторы
    parameters:
      - name: id
        in: path
        required: true
        type: string
        description: идентификатор ученика репетитора
    get:
      summary: Получение ученика репетитора
      operationId: get-teacher-student-id
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TeacherStudentDetail - copy'
          examples:
            Получение данных об ученике:
              id: 0
              last_name: string
              first_name: string
              patronymic_name: string
              phone: string
              email: user@example.com
              comment: string
              bind: unrelated
        '401':
          description: Unauthorized
          schema:
            type: object
            properties: {}
        '403':
          $ref: '#/responses/PermissionDenied'
      tags:
        - Репетиторы
      description: 'Получение полной информации о конкретном ученике репетитора. Эндпоинт доступен только для пользователя-репетитора, который создал ученика.'
  '/relate/student/{id}/':
    post:
      operationId: relate_student_create
      description: |-
        Отправляет запрос на добавление на почту (которую указал учитель) ученику, если он есть в базе. Если ученика нет в базе, то просто предлагает ему зарегистрироваться.
        Если ученик уже привязан или у существующего пользователя нет профиля ученика, то возникнет исключение. Если почты не существует, сообщение простоне будет отправлено.
        Эндпоинт досутпен только для пользователей-репетиторов.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              id:
                type: string
                x-stoplight:
                  id: djduae9801ksd
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              success:
                type: string
            x-examples:
              Example 1:
                success: Ваш запрос был успешно отправлен на почту пользователю!
          examples:
            Запрос отправлен успешно!:
              success: Ваш запрос был успешно отправлен на почту пользователю!
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
            x-examples:
              Example 1:
                detail: Такой записи не существует!
          examples:
            У пользователя нет профиля ученика:
              detail: 'Вы не можете добавить этого пользователя, так как он не является учеником!'
            Ученик уже привязан:
              detail: К данной записи ученик уже привязан!
            Ученика создал другой репетитор:
              detail: У вас нет прав на осуществление этого действия!
            Записи ученика не существует:
              detail: Такой записи не существует!
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      tags:
        - Привязка ученика
      summary: Привязка ученика к псевдоученику репетитора
    patch:
      operationId: relate_student_partial_update
      description: Отвязка ученика от репетитора. Эндпоинт досутпен только пользователей-репетиторов.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              success:
                type: string
            x-examples:
              Example 1:
                success: Ученик был успешно отвязан от вас!
          examples:
            Отвязка прошла успешно:
              success: Ученик был успешно отвязан от вас!
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              detail:
                type: string
            x-examples:
              Example 1:
                detail: Такой записи не существует!
          examples:
            Ученик не привязан к псевдоученику:
              detail: К этой записи не привязан ученик!
            Псевдоученик не относится к репетитору:
              detail: У вас нет прав на осуществление этого действия!
            Записи для отвязки не существует:
              detail: Такой записи не существует!
        '401':
          $ref: '#/responses/AuthenticationError'
        '403':
          $ref: '#/responses/PermissionDenied'
      summary: Отвязка ученика от псевдоученика репетитора
      tags:
        - Привязка ученика
    parameters:
      - name: id
        in: path
        required: true
        type: string
        description: идентификатор ученика репетитора
  '/confirm/{token}':
    get:
      operationId: confirm_read
      description: Подтверждение учеником привязки к репетитору
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - confirm
    parameters:
      - name: token
        in: path
        required: true
        type: string
  /materials/:
    get:
      operationId: materials_list
      description: ViewSet для эндпойнта /materials/
      parameters:
        - name: teacher_student
          in: query
          description: ''
          required: false
          type: string
        - name: subject
          in: query
          description: ''
          required: false
          type: string
        - name: text
          in: query
          description: ''
          required: false
          type: string
        - name: type
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Material'
      tags:
        - materials
    post:
      operationId: materials_create
      description: ViewSet для эндпойнта /materials/
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Material'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Material'
      tags:
        - materials
    parameters: []
  '/materials/{id}/':
    get:
      operationId: materials_read
      description: ViewSet для эндпойнта /materials/
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Material'
      tags:
        - materials
    patch:
      operationId: materials_partial_update
      description: ViewSet для эндпойнта /materials/
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Material'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Material'
      tags:
        - materials
    delete:
      operationId: materials_delete
      description: ViewSet для эндпойнта /materials/
      parameters: []
      responses:
        '204':
          description: ''
      tags:
        - materials
    parameters:
      - name: id
        in: path
        required: true
        type: string
  '/student/lesson/{id}/':
    get:
      operationId: student_lesson_read
      description: |-
        Возвращает конкретный урок для ученика,
        имеется только возможность чтения
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/StudentDetailLesson'
      tags:
        - student
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this Урок.
        required: true
        type: integer
  /teacher/lesson/:
    get:
      operationId: teacher_lesson_list
      description: |-
        Возвращает конкретный урок
        как для учителей, только учитель имеет право
        создавать, редактировать и удалять урок
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/TeacherDetailLesson'
      tags:
        - teacher
    parameters: []
  '/teacher/lesson/{id}/':
    get:
      operationId: teacher_lesson_read
      description: |-
        Возвращает конкретный урок
        как для учителей, только учитель имеет право
        создавать, редактировать и удалять урок
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TeacherDetailLesson'
      tags:
        - teacher
    patch:
      operationId: teacher_lesson_partial_update
      description: |-
        Возвращает конкретный урок
        как для учителей, только учитель имеет право
        создавать, редактировать и удалять урок
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TeacherDetailLesson'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TeacherDetailLesson'
      tags:
        - teacher
    delete:
      operationId: teacher_lesson_delete
      description: |-
        Возвращает конкретный урок
        как для учителей, только учитель имеет право
        создавать, редактировать и удалять урок
      parameters: []
      responses:
        '204':
          description: ''
      tags:
        - teacher
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this Урок.
        required: true
        type: integer
  /user/lesson/list/:
    get:
      operationId: user_lesson_list_list
      description: |-
        Возвращает список уроков с пагинацией и
        возможностью фильтрации
      parameters:
        - name: teacher
          in: query
          description: ''
          required: false
          type: string
        - name: student
          in: query
          description: ''
          required: false
          type: string
        - name: date
          in: query
          description: ''
          required: false
          type: string
        - name: subject
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: ''
      tags:
        - user
    post:
      operationId: user_lesson_list_create
      description: |-
        Возвращает список уроков с пагинацией и
        возможностью фильтрации
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - user
    parameters: []
  /user/lesson/number/:
    get:
      operationId: user_lesson_number_list
      description: |-
        Отфильтрованные данные группируются по выбранному параметру,
        по умолчанию это дата, но также имеется возможность по
        предметам, учителям для учеников и ученикам для учителей.
      parameters:
        - name: teacher
          in: query
          description: ''
          required: false
          type: string
        - name: student
          in: query
          description: ''
          required: false
          type: string
        - name: date
          in: query
          description: ''
          required: false
          type: string
        - name: subject
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: ''
      tags:
        - user
    parameters: []
definitions:
  TokenObtainPair:
    type: object
    x-stoplight:
      id: oi5dc9gs8qqgm
    x-examples: {}
    properties:
      email:
        title: Email
        type: string
        minLength: 1
        description: Почта
        example: example@example.com
        format: email
      password:
        title: Password
        type: string
        minLength: 1
        description: Пароль
        example: Fh789123!
        format: password
      role:
        type: string
        x-stoplight:
          id: vxmjpofs6yjbm
    required:
      - email
      - password
  Material:
    required:
      - teacher_student
      - subject
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      teacher:
        title: Teacher
        type: integer
        readOnly: true
      teacher_student:
        type: array
        items:
          type: string
        uniqueItems: true
      subject:
        title: Subject
        type: string
      file:
        title: Файл материалов
        type: string
        readOnly: true
        format: uri
      text:
        title: Текст к материалу
        type: string
      type:
        title: Type
        type: string
        enum:
          - public
          - private
        default: private
    x-stoplight:
      id: nbexrd7ac4dg6
  Profile:
    type: object
    x-stoplight:
      id: 58y0jwbrbj68t
    x-examples: []
    properties:
      id:
        title: Id
        type: string
        format: uuid
        readOnly: true
      first_name:
        title: Имя
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: |
          Имя
      patronymic_name:
        title: Отчество
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Отчество
      last_name:
        title: Фамилия
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Фамилия
      phone:
        title: Телефон
        type: string
        pattern: '^((\+7|7|8)[0-9]{10})$'
        minLength: 11
        maxLength: 13
        description: Телефон
        x-nullable: true
      email:
        title: Электронная почта
        format: email
        type: string
        minLength: 7
        maxLength: 254
        description: Почта
        readOnly: true
      photo:
        title: Фотография
        type: string
        format: uri
        description: Фото
        x-nullable: true
  TokenRefresh:
    required:
      - refresh
    type: object
    properties:
      refresh:
        title: Refresh
        type: string
        minLength: 1
      access:
        title: Access
        type: string
        readOnly: true
        minLength: 1
    x-stoplight:
      id: rz695mqtjmt4h
  Register:
    type: object
    x-stoplight:
      id: euzgkice5b9ac
    properties:
      id:
        title: Id
        type: string
        format: uuid
        readOnly: true
      first_name:
        title: Имя
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: 'Имя '
        example: Дмитрий
      patronymic_name:
        title: Отчество
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Отчество
        example: Владимирович
      last_name:
        title: Фамилия
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Фамилия
        example: Иванов
      email:
        title: Электронная почта
        type: string
        format: email
        maxLength: 254
        minLength: 7
        description: Почта
        example: example@example.com
      phone:
        title: Телефон
        type: string
        pattern: '^((\+7|7|8)[0-9]{10})$'
        description: Номер телефона
        minLength: 11
        maxLength: 13
        example: '81234567890'
        x-nullable: true
      is_teacher:
        title: Is teacher
        type: boolean
        description: Тип пользователя
      password:
        title: Password
        type: string
        description: Пароль
        format: password
        minLength: 8
        maxLength: 128
        example: Fh789123!
      password2:
        title: Password2
        type: string
        description: Повторение пароля
        format: password
        minLength: 8
        maxLength: 128
        example: Fh789123!
    required:
      - first_name
      - last_name
      - email
      - is_teacher
      - password
      - password2
    x-examples: []
  StudentDetailLesson:
    required:
      - date
      - start_time
      - end_time
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      date:
        title: Дата
        type: string
        format: date
      start_time:
        title: Начало урока
        type: string
      end_time:
        title: Конец урока
        type: string
      status:
        title: Status
        type: string
        readOnly: true
      homework:
        title: Homework
        type: boolean
        readOnly: true
      teacher:
        title: Teacher
        type: string
        readOnly: true
      subject_title:
        title: Subject title
        type: string
        readOnly: true
      topic:
        title: Тема урока
        type: string
        maxLength: 40
      comment:
        title: Комментарий
        type: string
    x-stoplight:
      id: 6nlhu77clz50r
  Subject:
    required:
      - title
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        maxLength: 30
        minLength: 1
    x-stoplight:
      id: 6idr3p2j2cxn3
  TeacherDetailLesson:
    required:
      - date
      - start_time
      - end_time
      - status
      - subject
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      date:
        title: Дата
        type: string
        format: date
      start_time:
        title: Начало урока
        type: string
      end_time:
        title: Конец урока
        type: string
      status:
        title: Status
        type: string
        minLength: 1
      homework:
        title: Homework
        type: boolean
        readOnly: true
      student_full_name:
        title: Student full name
        type: string
        readOnly: true
      subject:
        title: Subject
        type: integer
      subject_title:
        title: Subject title
        type: string
        readOnly: true
      topic:
        title: Тема урока
        type: string
        maxLength: 40
      comment:
        title: Комментарий
        type: string
    x-stoplight:
      id: hldvfkqomiu91
  TeacherStudentDetail - copy:
    type: object
    x-stoplight:
      id: 6uxqzs4lsznkt
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      last_name:
        title: Фамилия
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: |
          Фамилия
      first_name:
        title: Имя
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Имя
      patronymic_name:
        title: Отчество
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Отечество
      phone:
        title: Телефон
        type: string
        pattern: '^((\+7|7|8)[0-9]{10})$'
        minLength: 1
        description: Телефон
        x-nullable: true
      email:
        title: Электронная почта
        type: string
        format: email
        maxLength: 254
        minLength: 7
        description: Почта
      comment:
        title: Comment
        type: string
        description: Комментарий
      bind:
        title: Привязка
        type: string
        enum:
          - unrelated
          - awaiting
          - related
        description: Привязка
    required:
      - last_name
      - first_name
      - email
    x-examples:
      '':
        id: 0
        last_name: string
        first_name: string
        patronymic_name: string
        phone: string
        email: user@example.com
    title: ''
  TeacherStudentDetail - copy 2:
    type: object
    x-stoplight:
      id: xz450ne8wf2yo
    x-examples: {}
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      last_name:
        title: Фамилия
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: |
          Фамилия
      first_name:
        title: Имя
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Имя
      patronymic_name:
        title: Отчество
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Отечество
      phone:
        title: Телефон
        type: string
        pattern: '^((\+7|7|8)[0-9]{10})$'
        minLength: 1
        description: Телефон
        x-nullable: true
      email:
        title: Электронная почта
        type: string
        format: email
        maxLength: 254
        minLength: 7
        description: Почта
      comment:
        title: Comment
        type: string
        description: Комментарий
    required:
      - last_name
      - first_name
      - email
  TeacherStudent - copy:
    type: object
    x-stoplight:
      id: 3d4ac9ccbdj43
    x-examples:
      '':
        id: 0
        last_name: string
        first_name: string
        patronymic_name: string
        phone: string
        email: user@example.com
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      last_name:
        title: Фамилия
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: |
          Фамилия
      first_name:
        title: Имя
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Имя
      patronymic_name:
        title: Отчество
        type: string
        pattern: '^([А-ЯЁ]{1}[а-яё]{1,49})|([A-Z]{1}[a-z]{1,49})$'
        maxLength: 50
        minLength: 2
        description: Отечество
      phone:
        title: Телефон
        type: string
        pattern: '^((\+7|7|8)[0-9]{10})$'
        minLength: 1
        description: Телефон
        x-nullable: true
      email:
        title: Электронная почта
        type: string
        format: email
        maxLength: 254
        minLength: 7
        description: Почта
    required:
      - last_name
      - first_name
      - email
  UserSubject:
    type: object
    x-stoplight:
      id: 4c1ov33pucjk9
    properties:
      subjects:
        type: array
        uniqueItems: true
        items:
          type: integer
      titles:
        type: array
        uniqueItems: true
        items:
          type: string
          readOnly: true
        readOnly: true
    required:
      - subjects
  PermissionDenied:
    type: object
    properties:
      detail:
        type: string
    x-examples:
      Недостаточно прав:
        detail: У вас недостаточно прав для выполнения данного действия.
    title: ''
  AuthenticationError:
    type: object
    properties:
      detail:
        type: string
    x-examples:
      Пользователь не авторизован:
        detail: Учетные данные не были предоставлены
  ValidationError:
    type: object
    x-examples:
      Example 1:
        field_name:
          - Обязательное поле.
    properties:
      field_name:
        type: array
        description: |
          Поле, в котором возникли ошибки, таких полей может быть несколько
        items:
          type: string
    description: |
      Ошибка валидации данных
responses:
  PermissionDenied:
    description: Example response
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      $ref: '#/definitions/PermissionDenied'
  AuthenticationError:
    description: Example response
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      $ref: '#/definitions/AuthenticationError'
  ValidationError:
    description: Example response
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      $ref: '#/definitions/ValidationError'
